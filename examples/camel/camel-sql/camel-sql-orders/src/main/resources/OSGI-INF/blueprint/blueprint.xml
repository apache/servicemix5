<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<blueprint
        xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

    <bean id="orderBean" class="org.apache.servicemix.examples.camel.sql.OrderBean" init-method="init"/>

    <reference id="dataSource" interface="javax.sql.DataSource" filter="(datasource.name=orders)">
        <reference-listener bind-method="onBind" unbind-method="onUnbind">
            <bean class="org.apache.servicemix.examples.camel.sql.ListenerBean"/>
        </reference-listener>
    </reference>

    <bean id="sql" class="org.apache.camel.component.sql.SqlComponent">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <camelContext xmlns="http://camel.apache.org/schema/blueprint">
        <propertyPlaceholder id="placeholder" location="classpath:sql.properties"/>
        <route id="generateOrder-route">
            <from uri="timer:foo?period=5s"/>
            <transform>
                <method ref="orderBean" method="generateRandomOrder"/>
            </transform>
            <to uri="sql:{{sql.insertOrder}}"/>
            <log message="Inserted a new order of ${body[item]}"/>
        </route>

        <!-- route that process the orders by picking up new rows from the database
      and when done processing then update the row to mark it as processed -->
        <route id="processOrder-route">
            <from uri="sql:{{sql.selectOrder}}?consumer.onConsume={{sql.markOrder}}"/>
            <to uri="bean:orderBean?method=processOrder"/>
            <log message="${body}"/>
        </route>
    </camelContext>




</blueprint>